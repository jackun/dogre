/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.glx;

private import derelict.util.system;

static if(Derelict_OS_Posix && !Derelict_OS_Mac)
{
    private
    {
        import std.string;
        import std.conv: to;

        import derelict.util.loader;
        import derelict.util.xtypes;
        import derelict.opengl3.types;
        import derelict.opengl3.internal;//for SGI stuff
    }

    enum
    {
    
        // GLX 1.3 and later:
        GLX_CONFIG_CAVEAT       = 0x20,
        GLX_WINDOW_BIT          = 0x00000001,
        GLX_PIXMAP_BIT          = 0x00000002,
        GLX_PBUFFER_BIT         = 0x00000004,
        GLX_AUX_BUFFERS_BIT     = 0x00000010,
        
        GLX_FBCONFIG_ID         = 0x8013,
        GLX_SLOW_CONFIG         = 0x8001,
        GLX_VISUAL_ID           = 0x800B,
        GLX_SCREEN              = 0x800C,
        GLX_NON_CONFORMANT_CONFIG   = 0x800D,
        GLX_DRAWABLE_TYPE       = 0x8010,
        GLX_RENDER_TYPE         = 0x8011,
        GLX_X_RENDERABLE        = 0x8012,
        //GLX_FBCONFIG_ID         = 0x8013,
        GLX_RGBA_TYPE           = 0x8014,
        GLX_COLOR_INDEX_TYPE    = 0x8015,
        GLX_MAX_PBUFFER_WIDTH   = 0x8016,
        GLX_MAX_PBUFFER_HEIGHT  = 0x8017,
        GLX_MAX_PBUFFER_PIXELS  = 0x8018,
        GLX_PRESERVED_CONTENTS  = 0x801B,
        GLX_LARGEST_PBUFFER     = 0x801C,
        GLX_WIDTH               = 0x801D,
        GLX_HEIGHT              = 0x801E,
        GLX_EVENT_MASK          = 0x801F,
        GLX_DAMAGED             = 0x8020,
        GLX_SAVED               = 0x8021,
        GLX_WINDOW              = 0x8022,
        GLX_PBUFFER             = 0x8023,
        GLX_PBUFFER_HEIGHT      = 0x8040,
        GLX_PBUFFER_WIDTH       = 0x8041,
        GLX_RGBA_BIT            = 0x00000001,
        GLX_COLOR_INDEX_BIT     = 0x00000002,
        GLX_PBUFFER_CLOBBER_MASK    = 0x08000000,
                
                
        //GLX 1.4 and later:
        GLX_SAMPLE_BUFFERS              = 0x186a0, /*100000*/
        GLX_SAMPLES                     = 0x186a1, /*100001*/
        
        //Tokens for glXChooseVisual and glXGetConfig:
        GLX_USE_GL              = 1,
        GLX_BUFFER_SIZE         = 2,
        GLX_LEVEL               = 3,
        GLX_RGBA                = 4,
        GLX_DOUBLEBUFFER        = 5,
        GLX_STEREO              = 6,
        GLX_AUX_BUFFERS         = 7,
        GLX_RED_SIZE            = 8,
        GLX_GREEN_SIZE          = 9,
        GLX_BLUE_SIZE           = 10,
        GLX_ALPHA_SIZE          = 11,
        GLX_DEPTH_SIZE          = 12,
        GLX_STENCIL_SIZE        = 13,
        GLX_ACCUM_RED_SIZE      = 14,
        GLX_ACCUM_GREEN_SIZE    = 15,
        GLX_ACCUM_BLUE_SIZE     = 16,
        GLX_ACCUM_ALPHA_SIZE    = 17,
        
        //GLX_EXT_import_context
        GLX_SHARE_CONTEXT_EXT   = 0x800A,
        GLX_VISUAL_ID_EXT       = 0x800B,
        GLX_SCREEN_EXT          = 0x800C,
        
        //GLX_EXT_framebuffer_sRGB
        GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x20B2,
        
        //GLX_ARB_fbconfig_float
        GLX_RGBA_FLOAT_BIT  = 0x00000004,
        GLX_RGBA_FLOAT_TYPE = 0x20B9,
    }
    
    version(X86_64)
    {
        alias long c_long;
        alias ulong c_ulong;
    }
    else
    {
        alias int c_long;
        alias uint c_ulong;
    }
    
    struct __GLXcontextRec;
    struct __GLXFBConfigRec;

    alias c_ulong GLXContentID;
    alias c_ulong GLXContextID;
    alias c_ulong GLXPixmap;
    alias c_ulong GLXDrawable;
    alias c_ulong GLXPbuffer;
    alias c_ulong GLXWindow;
    alias c_ulong GLXFBConfigID;

    alias __GLXcontextRec *GLXContext;
    alias __GLXFBConfigRec *GLXFBConfig;
    alias __GLXFBConfigRec *GLXFBConfigSGIX;

    struct GLXPbufferClobberEvent
    {
        int         event_type;
        int         draw_type;
        uint        serial;
        Bool        send_event;
        Display*    display;
        GLXDrawable drawable;
        uint        buffer_mask;
        uint        aux_buffer;
        int         x, y;
        int         width, height;
        int         count;
    }

    union GLXEvent
    {
        GLXPbufferClobberEvent glxpbufferclobber;
        int pad[24];
    }

    extern (C)
    {
        alias nothrow XVisualInfo* function(Display*,int,int*) da_glXChooseVisual;
        alias nothrow void function(Display*,GLXContext,GLXContext,uint) da_glXCopyContext;
        alias nothrow GLXContext function(Display*,XVisualInfo*,GLXContext,Bool) da_glXCreateContext;
        alias nothrow GLXPixmap function(Display*,XVisualInfo*,Pixmap) da_glXCreateGLXPixmap;
        alias nothrow void function(Display*,GLXContext) da_glXDestroyContext;
        alias nothrow void function(Display*,GLXPixmap) da_glXDestroyGLXPixmap;
        alias nothrow int  function(Display*,XVisualInfo*,int,int*) da_glXGetConfig;
        alias nothrow GLXContext function() da_glXGetCurrentContext;
        alias nothrow GLXDrawable function() da_glXGetCurrentDrawable;
        alias nothrow Bool function(Display*,GLXContext) da_glXIsDirect;
        alias nothrow Bool function(Display*,GLXDrawable,GLXContext) da_glXMakeCurrent;
        alias nothrow Bool function(Display*,int*,int*) da_glXQueryExtension;
        alias nothrow Bool function(Display*,int*,int*) da_glXQueryVersion;
        alias nothrow void function(Display*,GLXDrawable) da_glXSwapBuffers;
        alias nothrow void function(Font,int,int,int) da_glXUseXFont;
        alias nothrow void function() da_glXWaitGL;
        alias nothrow void function() da_glXWaitX;
        alias nothrow char* function(Display*,int) da_glXGetClientString;
        alias nothrow char* function(Display*,int,int) da_glXQueryServerString;
        alias nothrow char* function(Display*,int) da_glXQueryExtensionsString;

        /* GLX 1.3 */

        alias nothrow GLXFBConfig* function(Display*,int,int*) da_glXGetFBConfigs;
        alias nothrow GLXFBConfig* function(Display*,int,int*,int*) da_glXChooseFBConfig;
        alias nothrow int  function(Display*,GLXFBConfig,int,int*) da_glXGetFBConfigAttrib;
        alias nothrow XVisualInfo* function(Display*,GLXFBConfig) da_glXGetVisualFromFBConfig;
        alias nothrow GLXWindow function(Display*,GLXFBConfig,Window,int*) da_glXCreateWindow;
        alias nothrow void function(Display*,GLXWindow) da_glXDestroyWindow;
        alias nothrow GLXPixmap function(Display*,GLXFBConfig,Pixmap,int*) da_glXCreatePixmap;
        alias nothrow void function(Display*,GLXPixmap) da_glXDestroyPixmap;
        alias nothrow GLXPbuffer function(Display*,GLXFBConfig,int*) da_glXCreatePbuffer;
        alias nothrow void function(Display*,GLXPbuffer) da_glXDestroyPbuffer;
        alias nothrow void function(Display*,GLXDrawable,int,uint*) da_glXQueryDrawable;
        alias nothrow GLXContext function(Display*,GLXFBConfig,int,GLXContext,Bool) da_glXCreateNewContext;
        alias nothrow Bool function(Display*,GLXDrawable,GLXDrawable,GLXContext) da_glXMakeContextCurrent;
        alias nothrow GLXDrawable function() da_glXGetCurrentReadDrawable;
        alias nothrow Display* function() da_glXGetCurrentDisplay;
        alias nothrow int  function(Display*,GLXContext,int,int*) da_glXQueryContext;
        alias nothrow void function(Display*,GLXDrawable,uint) da_glXSelectEvent;
        alias nothrow void function(Display*,GLXDrawable,uint*) da_glXGetSelectedEvent;

        /* GLX 1.4+ */
        alias nothrow void* function(const(char)*) da_glXGetProcAddress;
    }

    __gshared
    {
        da_glXChooseVisual glXChooseVisual;
        da_glXCopyContext glXCopyContext;
        da_glXCreateContext glXCreateContext;
        da_glXCreateGLXPixmap glXCreateGLXPixmap;
        da_glXDestroyContext glXDestroyContext;
        da_glXDestroyGLXPixmap glXDestroyGLXPixmap;
        da_glXGetConfig glXGetConfig;
        da_glXGetCurrentContext glXGetCurrentContext;
        da_glXGetCurrentDrawable glXGetCurrentDrawable;
        da_glXIsDirect glXIsDirect;
        da_glXMakeCurrent glXMakeCurrent;
        da_glXQueryExtension glXQueryExtension;
        da_glXQueryVersion glXQueryVersion;
        da_glXSwapBuffers glXSwapBuffers;
        da_glXUseXFont glXUseXFont;
        da_glXWaitGL glXWaitGL;
        da_glXWaitX glXWaitX;
        da_glXGetClientString glXGetClientString;
        da_glXQueryServerString glXQueryServerString;
        da_glXQueryExtensionsString glXQueryExtensionsString;

        /* GLX 1.3 */

        da_glXGetFBConfigs glXGetFBConfigs;
        da_glXChooseFBConfig glXChooseFBConfig;
        da_glXGetFBConfigAttrib glXGetFBConfigAttrib;
        da_glXGetVisualFromFBConfig glXGetVisualFromFBConfig;
        da_glXCreateWindow glXCreateWindow;
        da_glXDestroyWindow glXDestroyWindow;
        da_glXCreatePixmap glXCreatePixmap;
        da_glXDestroyPixmap glXDestroyPixmap;
        da_glXCreatePbuffer glXCreatePbuffer;
        da_glXDestroyPbuffer glXDestroyPbuffer;
        da_glXQueryDrawable glXQueryDrawable;
        da_glXCreateNewContext glXCreateNewContext;
        da_glXMakeContextCurrent glXMakeContextCurrent;
        da_glXGetCurrentReadDrawable glXGetCurrentReadDrawable;
        da_glXGetCurrentDisplay glXGetCurrentDisplay;
        da_glXQueryContext glXQueryContext;
        da_glXSelectEvent glXSelectEvent;
        da_glXGetSelectedEvent glXGetSelectedEvent;

        /* GLX 1.4+ */
        da_glXGetProcAddress glXGetProcAddress;
        
        //EXT
        
    }

    package
    {
        void loadPlatformGL(void delegate(void**, string, bool doThrow) bindFunc)
        {
            bindFunc(cast(void**)&glXChooseVisual, "glXChooseVisual", true);
            bindFunc(cast(void**)&glXCopyContext, "glXCopyContext", true);
            bindFunc(cast(void**)&glXCreateContext, "glXCreateContext", true);
            bindFunc(cast(void**)&glXCreateGLXPixmap, "glXCreateGLXPixmap", true);
            bindFunc(cast(void**)&glXDestroyContext, "glXDestroyContext", true);
            bindFunc(cast(void**)&glXDestroyGLXPixmap, "glXDestroyGLXPixmap", true);
            bindFunc(cast(void**)&glXGetConfig, "glXGetConfig", true);
            bindFunc(cast(void**)&glXGetCurrentContext, "glXGetCurrentContext", true);
            bindFunc(cast(void**)&glXGetCurrentDrawable, "glXGetCurrentDrawable", true);
            bindFunc(cast(void**)&glXIsDirect, "glXIsDirect", true);
            bindFunc(cast(void**)&glXMakeCurrent, "glXMakeCurrent", true);
            bindFunc(cast(void**)&glXQueryExtension, "glXQueryExtension", true);
            bindFunc(cast(void**)&glXQueryVersion, "glXQueryVersion", true);
            bindFunc(cast(void**)&glXSwapBuffers, "glXSwapBuffers", true);
            bindFunc(cast(void**)&glXUseXFont, "glXUseXFont", true);
            bindFunc(cast(void**)&glXWaitGL, "glXWaitGL", true);
            bindFunc(cast(void**)&glXWaitX, "glXWaitX", true);
            bindFunc(cast(void**)&glXGetClientString, "glXGetClientString", true);
            bindFunc(cast(void**)&glXQueryServerString, "glXQueryServerString", true);
            bindFunc(cast(void**)&glXQueryExtensionsString, "glXQueryExtensionsString", true);

            bindFunc(cast(void**)&glXGetFBConfigs, "glXGetFBConfigs", true);
            bindFunc(cast(void**)&glXChooseFBConfig, "glXChooseFBConfig", true);
            bindFunc(cast(void**)&glXGetFBConfigAttrib, "glXGetFBConfigAttrib", true);
            bindFunc(cast(void**)&glXGetVisualFromFBConfig, "glXGetVisualFromFBConfig", true);
            bindFunc(cast(void**)&glXCreateWindow, "glXCreateWindow", true);
            bindFunc(cast(void**)&glXDestroyWindow, "glXDestroyWindow", true);
            bindFunc(cast(void**)&glXCreatePixmap, "glXCreatePixmap", true);
            bindFunc(cast(void**)&glXDestroyPixmap, "glXDestroyPixmap", true);
            bindFunc(cast(void**)&glXCreatePbuffer, "glXCreatePbuffer", true);
            bindFunc(cast(void**)&glXDestroyPbuffer, "glXDestroyPbuffer", true);
            bindFunc(cast(void**)&glXQueryDrawable, "glXQueryDrawable", true);
            bindFunc(cast(void**)&glXCreateNewContext, "glXCreateNewContext", true);
            bindFunc(cast(void**)&glXMakeContextCurrent, "glXMakeContextCurrent", true);
            bindFunc(cast(void**)&glXGetCurrentReadDrawable, "glXGetCurrentReadDrawable", true);
            bindFunc(cast(void**)&glXGetCurrentDisplay, "glXGetCurrentDisplay", true);
            bindFunc(cast(void**)&glXQueryContext, "glXQueryContext", true);
            bindFunc(cast(void**)&glXSelectEvent, "glXSelectEvent", true);
            bindFunc(cast(void**)&glXGetSelectedEvent, "glXGetSelectedEvent", true);

            bindFunc(cast(void**)&glXGetProcAddress, "glXGetProcAddressARB", true);
            
            //loadSGI();
        }

        void* loadGLFunc(string symName)
        {
            return glXGetProcAddress(symName.toStringz());
        }

        bool hasValidContext()
        {
            if(glXGetCurrentContext && glXGetCurrentContext())
                return true;
            return false;
        }
    }
    
    
    //TODO GLX EXT/SGI stuff works?
    //GLX_SGIX_swap_interval
    extern(System) alias nothrow int function(int interval) da_glXSwapIntervalSGI;
    __gshared da_glXSwapIntervalSGI glXSwapIntervalSGI;
    private __gshared bool _SGI_swap_control;
    bool SGI_swap_control() @property { return _SGI_swap_control; }
    private void load_SGI_swap_control()
    {
        try
        {
            bindGLFunc(cast(void**)&glXSwapIntervalSGI, "glXSwapIntervalSGI");
            _SGI_swap_control = true;
        }
        catch(Exception e)
        {
            _SGI_swap_control = false;
        }
    }
    
    //GLX_SGIX_fbconfig
    extern(System)
    {
        alias nothrow GLXFBConfigSGIX* function(void *dpy, int, const(int)*,int*) da_glXChooseFBConfigSGIX;
        alias nothrow GLXContext function(void* dpy, GLXFBConfig,int,GLXContext,Bool) da_glXCreateContextWithConfigSGIX;
        alias nothrow GLXPixmap function(void* dpy, GLXFBConfig,Pixmap) da_glXCreateGLXPixmapWithConfigSGIX;
        alias nothrow int function(void* dpy, GLXFBConfigSGIX,int,int*) da_glXGetFBConfigAttribSGIX;
        alias nothrow GLXFBConfigSGIX function(void* dpy,XVisualInfo*) da_glXGetFBConfigFromVisualSGIX;
        alias nothrow XVisualInfo* function(void *dpy,GLXFBConfig) da_glXGetVisualFromFBConfigSGIX;
    }
    
    __gshared
    {
        da_glXChooseFBConfigSGIX glXChooseFBConfigSGIX;
        da_glXCreateContextWithConfigSGIX glXCreateContextWithConfigSGIX;
        da_glXCreateGLXPixmapWithConfigSGIX glXCreateGLXPixmapWithConfigSGIX;
        da_glXGetFBConfigAttribSGIX glXGetFBConfigAttribSGIX;
        da_glXGetFBConfigFromVisualSGIX glXGetFBConfigFromVisualSGIX;
        da_glXGetVisualFromFBConfigSGIX glXGetVisualFromFBConfigSGIX;
    }
    
    private __gshared bool _SGIX_fbconfig;
    bool SGIX_fbconfig() @property { return _SGIX_fbconfig; }
    private void load_SGIX_fbconfig()
    {
        try
        {
            bindGLFunc(cast(void**)&glXChooseFBConfigSGIX, "glXChooseFBConfigSGIX");
            bindGLFunc(cast(void**)&glXCreateContextWithConfigSGIX, "glXCreateContextWithConfigSGIX");
            bindGLFunc(cast(void**)&glXCreateGLXPixmapWithConfigSGIX, "glXCreateGLXPixmapWithConfigSGIX");
            bindGLFunc(cast(void**)&glXGetFBConfigAttribSGIX, "glXGetFBConfigAttribSGIX");
            bindGLFunc(cast(void**)&glXGetFBConfigFromVisualSGIX, "glXGetFBConfigFromVisualSGIX");
            bindGLFunc(cast(void**)&glXGetVisualFromFBConfigSGIX, "glXGetVisualFromFBConfigSGIX");
            _SGIX_fbconfig = true;
        }
        catch(Exception e)
        {
            _SGIX_fbconfig = false;
        }
    }
    
    //GLX_EXT_import_context
    extern(System)
    {
        alias nothrow void function(Display* dpy, GLXContext) da_glXFreeContextEXT;
        alias nothrow GLXContextID function(const GLXContext) da_glXGetContextIDEXT;
        alias nothrow GLXContext function(Display* dpy,GLXContextID) da_glXImportContextEXT;
        alias nothrow int function(Display* dpy, GLXContext, int,int*) da_glXQueryContextInfoEXT;
    }
    
    __gshared
    {
        da_glXFreeContextEXT glXFreeContextEXT;
        da_glXGetContextIDEXT glXGetContextIDEXT;
        da_glXImportContextEXT glXImportContextEXT;
        da_glXQueryContextInfoEXT glXQueryContextInfoEXT;
    }
    
    private __gshared bool _EXT_import_context;
    bool EXT_import_context() @property { return _EXT_import_context; }
    private void load_EXT_import_context()
    {
        try
        {
            bindGLFunc(cast(void**)&glXFreeContextEXT, "glXFreeContextEXT");
            bindGLFunc(cast(void**)&glXGetContextIDEXT, "glXGetContextIDEXT");
            bindGLFunc(cast(void**)&glXImportContextEXT, "glXImportContextEXT");
            bindGLFunc(cast(void**)&glXQueryContextInfoEXT, "glXQueryContextInfoEXT");
            _EXT_import_context = true;
        }
        catch(Exception e)
        {
            _EXT_import_context = false;
        }
    }
    
    private __gshared bool _EXT_framebuffer_sRGB;
    bool EXT_framebuffer_sRGB() @property { return _EXT_framebuffer_sRGB; }
    private __gshared bool _ARB_fbconfig_float;
    bool ARB_fbconfig_float() @property { return _ARB_fbconfig_float; }
        
    package void loadSGI(GLVersion glversion)
    {
        if(isGLXExtSupported(glversion, "GLX_SGI_swap_control")) load_SGI_swap_control();
        if(isGLXExtSupported(glversion, "GLX_SGIX_fbconfig")) load_SGIX_fbconfig();
        if(isGLXExtSupported(glversion, "GLX_EXT_import_context")) load_EXT_import_context();
        _EXT_framebuffer_sRGB = isGLXExtSupported(glversion, "GLX_EXT_framebuffer_sRGB");
        _ARB_fbconfig_float = isGLXExtSupported(glversion, "GLX_ARB_fbconfig_float");
    }
    
    bool isGLXExtSupported(GLVersion ver, string name)
    {
        //__gshared 
        string extstr;
        if(extstr is null)
            extstr = to!string(glXGetClientString(glXGetCurrentDisplay(), /*GLX_EXTENSIONS*/ 3));
        
        debug(STDERR)
        {
            static __gshared bool hasPrinted;
            if(!hasPrinted)
            {
                std.stdio.stderr.writeln("GLX extensions:");
                std.stdio.stderr.writeln(extstr);
                hasPrinted = true;
            }
        }
        
        auto index = extstr.indexOf(name);
        if(index != -1)
        {
            // It's possible that the extension name is actually a
            // substring of another extension. If not, then the
            // character following the name in the extenions string
            // should be a space (or possibly the null character).
            size_t idx = index + name.length;
            if(extstr[idx] == ' ' || extstr[idx] == '\0')
                return true;
        }
        
        return false;
    }
}
