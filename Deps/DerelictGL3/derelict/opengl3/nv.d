/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.nv;

//Legacy stuff

private
{
    import derelict.opengl3.types;
    import derelict.opengl3.constants;
    import derelict.opengl3.internal;
}

enum : uint
{
    //NV_path_rendering //NV_register_combiners
    GL_SECONDARY_COLOR_NV                               = 0x852D,
    //NV_transform_feedback
    GL_BACK_PRIMARY_COLOR_NV                            = 0x8C77,
    GL_BACK_SECONDARY_COLOR_NV                          = 0x8C78,
    GL_TEXTURE_COORD_NV                                 = 0x8C79,
    GL_CLIP_DISTANCE_NV                                 = 0x8C7A,
    GL_VERTEX_ID_NV                                     = 0x8C7B,
    GL_PRIMITIVE_ID_NV                                  = 0x8C7C,
    GL_GENERIC_ATTRIB_NV                                = 0x8C7D,
    GL_TRANSFORM_FEEDBACK_ATTRIBS_NV                    = 0x8C7E,
    GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV                = 0x8C7F,
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV    = 0x8C80,
    GL_ACTIVE_VARYINGS_NV                               = 0x8C81,
    GL_ACTIVE_VARYING_MAX_LENGTH_NV                     = 0x8C82,
    GL_TRANSFORM_FEEDBACK_VARYINGS_NV                   = 0x8C83,
    GL_TRANSFORM_FEEDBACK_BUFFER_START_NV               = 0x8C84,
    GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV                = 0x8C85,
    GL_TRANSFORM_FEEDBACK_RECORD_NV                     = 0x8C86,
    GL_PRIMITIVES_GENERATED_NV                          = 0x8C87,
    GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV         = 0x8C88,
    GL_RASTERIZER_DISCARD_NV                            = 0x8C89,
    GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A,
    GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV       = 0x8C8B,
    GL_INTERLEAVED_ATTRIBS_NV                           = 0x8C8C,
    GL_SEPARATE_ATTRIBS_NV                              = 0x8C8D,
    GL_TRANSFORM_FEEDBACK_BUFFER_NV                     = 0x8C8E,
    GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV             = 0x8C8F,
    
    //NV_geometry_program4
    GL_GEOMETRY_PROGRAM_NV                      = 0x8C26,
    GL_MAX_PROGRAM_OUTPUT_VERTICES_NV           = 0x8C27,
    GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV   = 0x8C28,
    
}

//Ahh, NV stuff for fixed pipeline
private __gshared bool _NV_transform_feedback;
bool NV_transform_feedback() @property { return _NV_transform_feedback; }
extern(System)
{
    alias nothrow void function(GLuint program, const GLchar *name) da_glActiveVaryingNV;
    alias nothrow void function(GLenum primitiveMode) da_glBeginTransformFeedbackNV;
    alias nothrow void function(GLenum target, GLuint index, GLuint buffer) da_glBindBufferBaseNV;
    alias nothrow void function(GLenum target, GLuint index, GLuint buffer, GLintptr offset) da_glBindBufferOffsetNV;
    alias nothrow void function(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) da_glBindBufferRangeNV;
    alias nothrow void function() da_glEndTransformFeedbackNV;
    alias nothrow void function(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) da_glGetActiveVaryingNV;
    alias nothrow void function(GLuint program, GLuint index, GLint *location) da_glGetTransformFeedbackVaryingNV;
    alias nothrow GLint function(GLuint program, const GLchar *name) da_glGetVaryingLocationNV;
    alias nothrow void function(GLuint count, const GLint *attribs, GLenum bufferMode) da_glTransformFeedbackAttribsNV;
    alias nothrow void function(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode) da_glTransformFeedbackVaryingsNV;
}

__gshared
{
    da_glActiveVaryingNV                glActiveVaryingNV;
    da_glBeginTransformFeedbackNV       glBeginTransformFeedbackNV;
    da_glBindBufferBaseNV               glBindBufferBaseNV;
    da_glBindBufferOffsetNV             glBindBufferOffsetNV;
    da_glBindBufferRangeNV              glBindBufferRangeNV;
    da_glEndTransformFeedbackNV         glEndTransformFeedbackNV;
    da_glGetActiveVaryingNV             glGetActiveVaryingNV;
    da_glGetTransformFeedbackVaryingNV  glGetTransformFeedbackVaryingNV;
    da_glGetVaryingLocationNV           glGetVaryingLocationNV;
    da_glTransformFeedbackAttribsNV     glTransformFeedbackAttribsNV;
    da_glTransformFeedbackVaryingsNV    glTransformFeedbackVaryingsNV;
}
private void load_NV_transform_feedback()
{
    try
    {
        bindGLFunc(cast(void**)&glActiveVaryingNV, "glActiveVaryingNV");
        bindGLFunc(cast(void**)&glBeginTransformFeedbackNV, "glBeginTransformFeedbackNV");
        bindGLFunc(cast(void**)&glBindBufferBaseNV, "glBindBufferBaseNV");
        bindGLFunc(cast(void**)&glBindBufferOffsetNV, "glBindBufferOffsetNV");
        bindGLFunc(cast(void**)&glBindBufferRangeNV, "glBindBufferRangeNV");
        bindGLFunc(cast(void**)&glEndTransformFeedbackNV, "glEndTransformFeedbackNV");
        bindGLFunc(cast(void**)&glGetActiveVaryingNV, "glGetActiveVaryingNV");
        bindGLFunc(cast(void**)&glGetTransformFeedbackVaryingNV, "glGetTransformFeedbackVaryingNV");
        bindGLFunc(cast(void**)&glGetVaryingLocationNV, "glGetVaryingLocationNV");
        bindGLFunc(cast(void**)&glTransformFeedbackAttribsNV, "glTransformFeedbackAttribsNV");
        bindGLFunc(cast(void**)&glTransformFeedbackVaryingsNV, "glTransformFeedbackVaryingsNV");
        _NV_transform_feedback = true;
    }
    catch(Exception e)
    {
        _NV_transform_feedback = false;
    }
}

//NV_geometry_program4
private __gshared bool _NV_geometry_program4;
bool NV_geometry_program4() @property { return _NV_geometry_program4; }
extern(System) alias nothrow void function(GLenum target, GLint limit) da_glProgramVertexLimitNV;
__gshared da_glProgramVertexLimitNV glProgramVertexLimitNV;
private void load_NV_geometry_program4()
{
    try
    {
        bindGLFunc(cast(void**)&glProgramVertexLimitNV, "glProgramVertexLimitNV");
        _NV_geometry_program4 = true;
    }
    catch(Exception e)
    {
        _NV_geometry_program4 = false;
    }
}

package void loadNV(GLVersion glversion)
{
    _NV_transform_feedback = isExtSupported(glversion, "GL_NV_transform_feedback");
    _NV_geometry_program4 = isExtSupported(glversion, "GL_NV_geometry_program4");
    
    if(_NV_transform_feedback) load_NV_transform_feedback();
    if(_NV_geometry_program4) load_NV_geometry_program4();
}
