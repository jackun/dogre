/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.wext;
//Just throwing s*it  in here that GL rendersystem wants
version(Windows):
private
{
    import std.string;
    
    import derelict.opengl3.types;
    import derelict.opengl3.constants;
    import derelict.opengl3.internal;
    import derelict.util.wintypes;
}

//Added.
enum
{
    //WGL_ARB_pixel_format
    WGL_DRAW_TO_WINDOW_ARB              = 0x2001,
    WGL_ACCELERATION_ARB                = 0x2003,
    WGL_SUPPORT_OPENGL_ARB              = 0x2010,
    WGL_DOUBLE_BUFFER_ARB               = 0x2011,
    WGL_PIXEL_TYPE_ARB                  = 0x2013,
    WGL_COLOR_BITS_ARB                  = 0x2014,
    WGL_RED_BITS_ARB                    = 0x2015,
    WGL_RED_SHIFT_ARB                   = 0x2016,
    WGL_GREEN_BITS_ARB                  = 0x2017,
    WGL_GREEN_SHIFT_ARB                 = 0x2018,
    WGL_BLUE_BITS_ARB                   = 0x2019,
    WGL_BLUE_SHIFT_ARB                  = 0x201A,
    WGL_ALPHA_BITS_ARB                  = 0x201B,
    WGL_DEPTH_BITS_ARB                  = 0x2022,
    WGL_STENCIL_BITS_ARB                = 0x2023,
    WGL_FULL_ACCELERATION_ARB           = 0x2027,
    WGL_TYPE_RGBA_ARB                   = 0x202B,
    
    //WGL_EXT_framebuffer_sRGB
    WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT    = 0x20A9,
    
    //WGL_ARB_multisample
    WGL_SAMPLE_BUFFERS_ARB              = 0x2041,
    WGL_SAMPLES_ARB                     = 0x2042,

    //WGL_ARB_pixel_format_float
    WGL_TYPE_RGBA_FLOAT_ARB             = 0x21A0,

    //WGL_ARB_pbuffer
    WGL_DRAW_TO_PBUFFER_ARB             = 0x202D,
    WGL_MAX_PBUFFER_PIXELS_ARB          = 0x202E,
    WGL_MAX_PBUFFER_WIDTH_ARB           = 0x202F,
    WGL_MAX_PBUFFER_HEIGHT_ARB          = 0x2030,
    WGL_PBUFFER_LARGEST_ARB             = 0x2033,
    WGL_PBUFFER_WIDTH_ARB               = 0x2034,
    WGL_PBUFFER_HEIGHT_ARB              = 0x2035,
    WGL_PBUFFER_LOST_ARB                = 0x2036,
}


extern(Windows)
{
    alias nothrow HPBUFFERARB function(HDC, int, int, int, const(int)*) da_wglCreatePbufferARB;
    alias nothrow BOOL function(HPBUFFERARB) da_wglDestroyPbufferARB;
    alias nothrow HDC function(HPBUFFERARB) da_wglGetPbufferDCARB;
    alias nothrow BOOL function(HPBUFFERARB, int, int*) da_wglQueryPbufferARB;
    alias nothrow int function(HPBUFFERARB, HDC) da_wglReleasePbufferDCARB;
}
__gshared
{
    da_wglCreatePbufferARB wglCreatePbufferARB;
    da_wglDestroyPbufferARB wglDestroyPbufferARB;
    da_wglGetPbufferDCARB wglGetPbufferDCARB;
    da_wglQueryPbufferARB wglQueryPbufferARB;
    da_wglReleasePbufferDCARB wglReleasePbufferDCARB;
}
private __gshared bool _WGL_ARB_pbuffer;
bool WGL_ARB_pbuffer() @property { return _WGL_ARB_pbuffer; }
private void load_WGL_ARB_pbuffer()
{
    try
    {
        bindGLFunc(cast(void**)&wglCreatePbufferARB, "wglCreatePbufferARB");
        bindGLFunc(cast(void**)&wglDestroyPbufferARB, "wglDestroyPbufferARB");
        bindGLFunc(cast(void**)&wglGetPbufferDCARB, "wglGetPbufferDCARB");
        bindGLFunc(cast(void**)&wglQueryPbufferARB, "wglQueryPbufferARB");
        bindGLFunc(cast(void**)&wglReleasePbufferDCARB, "wglReleasePbufferDCARB");
        _WGL_ARB_pbuffer = true;
    }
    catch(Exception e)
    {
        _WGL_ARB_pbuffer = false;
    }
}

//WGL_ARB_pixel_format
extern(Windows)
{
    alias nothrow BOOL function(HDC, int, int, uint, const int *, int *) da_wglGetPixelFormatAttribivARB;
    alias nothrow BOOL function(HDC, int, int, uint, const int *, float *) da_wglGetPixelFormatAttribfvARB;
    //Already in wgl.d
    //alias nothrow BOOL function(HDC, const int *, const(float) *, uint, int *, uint *) da_wglChoosePixelFormatARB;
}

__gshared
{
    da_wglGetPixelFormatAttribivARB wglGetPixelFormatAttribivARB;
    da_wglGetPixelFormatAttribfvARB wglGetPixelFormatAttribfvARB;
}

private __gshared bool _WGL_ARB_pixel_format;
bool WGL_ARB_pixel_format() @property { return _WGL_ARB_pixel_format; }
private void load_WGL_ARB_pixel_format()
{
    try
    {
        bindGLFunc(cast(void**)&wglGetPixelFormatAttribivARB, "wglGetPixelFormatAttribivARB");
        bindGLFunc(cast(void**)&wglGetPixelFormatAttribfvARB, "wglGetPixelFormatAttribfvARB");
        _WGL_ARB_pixel_format = true;
    }
    catch(Exception e)
    {
        _WGL_ARB_pixel_format = false;
    }
}

//WGL_EXT_swap_control
extern(Windows)
{
    alias nothrow BOOL function(int) da_wglSwapIntervalEXT;
    alias nothrow int  function() da_wglGetSwapIntervalEXT;
}
__gshared
{
    da_wglSwapIntervalEXT wglSwapIntervalEXT;
    da_wglGetSwapIntervalEXT wglGetSwapIntervalEXT;
}
private __gshared bool _WGL_EXT_swap_control;
bool WGL_EXT_swap_control() @property { return _WGL_EXT_swap_control; }
private void load_WGL_EXT_swap_control()
{
    try
    {
        bindGLFunc(cast(void**)&wglSwapIntervalEXT, "wglSwapIntervalEXT");
        bindGLFunc(cast(void**)&wglGetSwapIntervalEXT, "wglGetSwapIntervalEXT");
        _WGL_EXT_swap_control = true;
    }
    catch(Exception e)
    {
        _WGL_EXT_swap_control = false;
    }
}

package void loadWEXT(GLVersion glversion)
{
    load_WGL_ARB_pbuffer();
    load_WGL_ARB_pixel_format();
    load_WGL_EXT_swap_control();
}

/*bool isWExtSupported(GLVersion glversion, string name)
{
    //auto extstr = to!string(glGetString(GL_EXTENSIONS));
    auto extstr = to!string(wglGetExtensionsStringARB(hDC));//Also possible that ARB returns null, while EXT works
    auto index = extstr.indexOf(name);
    if(index != -1)
    {
        // It's possible that the extension name is actually a
        // substring of another extension. If not, then the
        // character following the name in the extenions string
        // should be a space (or possibly the null character).
        size_t idx = index + name.length;
        if(extstr[idx] == ' ' || extstr[idx] == '\0')
            return true;
    }
    return false;
}*/
